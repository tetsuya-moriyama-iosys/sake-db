server {
    listen 443 ssl;
    server_name localhost;

    # SSL 証明書
    ssl_certificate     /etc/ssl/certs/cert.pem;
    ssl_certificate_key /etc/ssl/private/key.pem;
    
    # セキュリティヘッダー
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Vue フロントエンド
    location / {
        proxy_pass http://front:5173;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Gin バックエンド
    location /api/ {
        rewrite ^/api(/.*)$ $1 break;  # /api/ を削除
        proxy_pass http://backend:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_cookie_flags ~ Secure; # クッキーをセキュアにする

        # Vueの開発環境用にCORSを許可
        set $cors_origin "";

        if ($http_origin ~* "^http://front:5173$") {
            set $cors_origin $http_origin;
        }

        # CORS ヘッダーの追加
        add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
    
        # OPTIONS メソッドのプリフライトリクエスト処理
        if ($request_method = OPTIONS) {
            return 204;
        }
    }

    # WebSocket (Vite HMR)
    location /socket.io/ {
        proxy_pass http://front:5173/socket.io/;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host; # WebSocket用のホストヘッダーを追加
    }
}

server {
    listen 80;
    server_name localhost;

    ssl_certificate     /etc/ssl/certs/cert.pem;
    ssl_certificate_key /etc/ssl/private/key.pem;

    # HTTPをHTTPSにリダイレクト
    return 301 https://$host$request_uri;
}