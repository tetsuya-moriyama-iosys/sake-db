package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"backend/graph/graphModel"
	"backend/service/userService"
	"context"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*graphModel.User, error) {
	uObjID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	user, err := r.UserRepo.GetById(ctx, uObjID)
	if err != nil {
		return nil, err
	}
	return user.ToGraphQL(), nil
}

// GetUserByIDDetail is the resolver for the getUserByIdDetail field.
func (r *queryResolver) GetUserByIDDetail(ctx context.Context, id string) (*graphModel.UserPageData, error) {
	uObjID, err := primitive.ObjectIDFromHex(id) //BoardListByUserに必要なので･･････
	if err != nil {
		return nil, err
	}
	user, err := r.GetUserByID(ctx, id) //ユーザーデータ自体は通常のユーザーデータ取得メソッドを流用
	if err != nil {
		return nil, err
	}

	//ここからはユーザーページに特異なデータ
	eList, err := userService.GenerateUserDetail(ctx, uObjID, r.LiquorRepo)
	if err != nil {
		return nil, err
	}
	result := &graphModel.UserPageData{
		User:         user,
		EvaluateList: eList.ToGraphQL(),
	}

	return result, nil
}
