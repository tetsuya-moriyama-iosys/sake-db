package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"backend/db/repository/userRepository"
	"backend/graph/graphModel"
	"backend/middlewares/auth"
	"backend/service/userService"
	"context"
	"errors"

	"golang.org/x/crypto/bcrypt"
)

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input graphModel.RegisterInput) (bool, error) {
	loginUser, err := userService.GetUserData(ctx, r.UserRepo) //未ログイン状態ならuserIDはnilになる
	if err != nil {
		return false, err
	}
	id := loginUser.ID
	oldUser, err := r.UserRepo.GetById(ctx, id)
	if err != nil {
		return false, err
	}

	//新しいパスワードを生成する(入力が空であれば前の値を代入する)
	var newPassword []byte

	if input.Password != nil && len(*input.Password) != 0 { //空文字もnilと同等に扱う
		if len(*input.Password) < 8 {
			return false, errors.New("パスワードが短いです")
		}
		//パスワードをハッシュする
		newPassword, err = bcrypt.GenerateFromPassword([]byte(*input.Password), bcrypt.DefaultCost)
		if err != nil {
			return false, err
		}
	} else {
		newPassword = oldUser.Password
	}
	//ユーザー構造体の定義
	user := &userRepository.Model{
		ID:          oldUser.ID,
		Name:        input.Name,
		Email:       &input.Email,
		Password:    newPassword,
		ImageBase64: input.ImageBase64,
		Profile:     input.Profile,
	}

	err = r.UserRepo.Update(ctx, user)
	if err != nil {
		return false, nil
	}

	return true, nil
}

// GetMyData is the resolver for the getMyData field.
func (r *queryResolver) GetMyData(ctx context.Context) (*graphModel.User, error) {
	uId, err := auth.GetId(ctx)
	if err != nil {
		return nil, err
	}

	// ユーザー情報をデータベースから取得する処理
	user, err := r.UserRepo.GetById(ctx, uId)
	if err != nil {
		return nil, err
	}

	return user.ToGraphQL(), nil
}
