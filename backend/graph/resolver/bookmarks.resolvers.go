package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"backend/graph/graphModel"
	"backend/service/bookmarkService"
	"context"
	"fmt"
)

// AddBookMark is the resolver for the addBookMark field.
func (r *mutationResolver) AddBookMark(ctx context.Context, id string) (bool, error) {
	uId, targetId, err := bookmarkService.GetPrimitiveIds(ctx, id)
	err = r.BookmarkRepo.Add(ctx, uId, targetId)
	if err != nil {
		return false, err
	}
	return true, err
}

// RemoveBookMark is the resolver for the removeBookMark field.
func (r *mutationResolver) RemoveBookMark(ctx context.Context, id string) (bool, error) {
	uId, targetId, err := bookmarkService.GetPrimitiveIds(ctx, id)
	err = r.BookmarkRepo.Remove(ctx, uId, targetId)
	if err != nil {
		return false, err
	}
	return true, err
}

// GetRecommendLiquorList is the resolver for the getRecommendLiquorList field.
func (r *queryResolver) GetRecommendLiquorList(ctx context.Context, id string) ([]*graphModel.Liquor, error) {
	panic(fmt.Errorf("not implemented: GetRecommendLiquorList - getRecommendLiquorList"))
}

// GetBookMarkList is the resolver for the getBookMarkList field.
func (r *queryResolver) GetBookMarkList(ctx context.Context, id string) ([]*graphModel.BookMarkListUser, error) {
	panic(fmt.Errorf("not implemented: GetBookMarkList - getBookMarkList"))
}
