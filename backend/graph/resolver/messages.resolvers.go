package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"backend/graph/generated"
	"backend/graph/model"
	"context"
	"log"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

// ID is the resolver for the id field.
func (r *messageResolver) ID(ctx context.Context, obj *model.Message) (string, error) {
	// 変更点: fmt.Errorf("not implemented: ID - id") を削除し、IDを文字列として返すように修正
	return obj.ID.Hex(), nil
}

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, input string) (*model.Message, error) {
	message := &model.Message{
		ID:      primitive.NewObjectID(),
		Message: input,
	}

	_, err := r.messagesCollection().InsertOne(ctx, message)
	if err != nil {
		log.Printf("Error inserting message: %v", err) // エラーハンドリングの追加
		return nil, err
	}
	return message, nil
}

// Messages is the resolver for the messages field.
func (r *queryResolver) Messages(ctx context.Context) ([]*model.Message, error) {
	var messages []*model.Message

	cursor, err := r.messagesCollection().Find(ctx, bson.M{})
	if err != nil {
		log.Printf("Error finding messages: %v", err) // エラーハンドリングの追加
		return nil, err
	}
	defer cursor.Close(ctx)
	for cursor.Next(ctx) {
		var message model.Message
		if err = cursor.Decode(&message); err != nil {
			log.Printf("Error decoding message: %v", err) // エラーハンドリングの追加
			return nil, err
		}
		messages = append(messages, &message)
	}
	return messages, nil
}

// Message returns generated.MessageResolver implementation.
func (r *Resolver) Message() generated.MessageResolver { return &messageResolver{r} }

type messageResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) messagesCollection() *mongo.Collection {
	return r.DB.Collection("messages")
}
func (r *queryResolver) messagesCollection() *mongo.Collection {
	return r.DB.Collection("messages")
}
