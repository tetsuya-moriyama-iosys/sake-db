package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"backend/graph/graphModel"
	"backend/middlewares/customError"
	"backend/service/authService"
	"context"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input graphModel.RegisterInput) (*graphModel.AuthPayload, *customError.Error) {
	//登録して、挿入したデータを受け取る
	newUser, err := authService.RegisterUser(ctx, r.UserRepo, input)
	if err != nil {
		return nil, err
	}

	//ログイン処理を流用する
	u, err := r.Login(ctx, graphModel.LoginInput{
		Email:    *newUser.Email,
		Password: *input.Password,
	})
	if err != nil {
		return nil, err
	}
	return u, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input graphModel.LoginInput) (*graphModel.AuthPayload, *customError.Error) {
	user, err := authService.LoginWithInput(ctx, getResponseWriter(ctx), input, &r.UserRepo, r.UserTokenConfig)
	if err != nil {
		return nil, err
	}

	return user.ToGraphQL(), nil
}

// RefreshToken 単にリフレッシュトークンの更新をするAPI(Vueストアにユーザーデータが存在しており、アクセストークンが切れた導線)
func (r *mutationResolver) RefreshToken(ctx context.Context) (string, *customError.Error) {
	token, err := authService.RefreshTokens(getHttpRequest(ctx), getResponseWriter(ctx), r.UserTokenConfig)
	if err != nil {
		return "", err
	}
	return *token, nil
}

// LoginWithRefreshToken こちらはリフレッシュトークンを用いてログインするAPI(リロードなどでユーザーデータも同時取得する導線・実質再ログイン)
func (r *mutationResolver) LoginWithRefreshToken(ctx context.Context) (*graphModel.AuthPayload, *customError.Error) {
	userWithToken, err := authService.LoginWithRefreshToken(ctx, getHttpRequest(ctx), getResponseWriter(ctx), r.UserTokenConfig, &r.UserRepo)
	if err != nil {
		return nil, err
	}
	return userWithToken.ToGraphQL(), nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, *customError.Error) {
	return true, authService.DeleteRefreshToken(getResponseWriter(ctx))
}

// ResetEmail is the resolver for the resetEmail field.
func (r *mutationResolver) ResetEmail(ctx context.Context, email string) (bool, *customError.Error) {
	return authService.ResetEmail(ctx, r.UserRepo, email)
}

// ResetExe is the resolver for the resetExe field.
func (r *mutationResolver) ResetExe(ctx context.Context, token string, password string) (*graphModel.AuthPayload, *customError.Error) {
	user, err := authService.PasswordResetExe(ctx, r.UserRepo, token, password)
	if err != nil {
		return nil, err
	}
	//ログイン処理も同時にする(トークン発行が必要)
	lUser, err := r.Login(ctx, graphModel.LoginInput{
		Email:    *user.Email,
		Password: password,
	})
	if err != nil {
		return nil, err
	}
	return lUser, nil
}
