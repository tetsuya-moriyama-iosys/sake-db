package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"backend/db/repository/userRepository"
	"backend/graph/graphModel"
	"backend/middlewares/customError"
	"backend/service/authService"
	"backend/util/amazon/ses"
	"context"
	"errors"

	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"golang.org/x/crypto/bcrypt"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input graphModel.RegisterInput) (*graphModel.AuthPayload, *customError.Error) {
	//TODO: なんかロジックが大きいのでサービス層に分離すべきな気がする
	if input.Password == nil {
		return nil, errors.New("パスワードは必須です")
	}
	//パスワードをハッシュする
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(*input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, err
	}

	//ユーザー構造体の定義
	user := userRepository.Model{
		ID:          primitive.NewObjectID(),
		Name:        input.Name,
		Email:       &input.Email,
		Password:    hashedPassword,
		ImageBase64: input.ImageBase64,
		Profile:     input.Profile,
	}

	//登録して、挿入したデータを受け取る
	newUser, err := r.UserRepo.Register(ctx, &user)
	if err != nil {
		// MongoDBエラーかつ重複エラーかを判定
		var mongoErr mongo.WriteException
		if errors.As(err, &mongoErr) {
			if len(mongoErr.WriteErrors) > 0 && mongoErr.WriteErrors[0].Code == 11000 {
				return nil, errors.New("このメールアドレスは既に登録されています。")
			}
		}
		return nil, errors.New("ユーザー登録に失敗しました。")
	}

	//ログイン処理を流用する
	u, err := r.Login(ctx, graphModel.LoginInput{
		Email:    *newUser.Email,
		Password: *input.Password,
	})
	if err != nil {
		return nil, err
	}
	return u, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input graphModel.LoginInput) (*graphModel.AuthPayload, *customError.Error) {
	user, err := authService.LoginWithInput(ctx, getResponseWriter(ctx), input, &r.UserRepo, r.UserTokenConfig)
	if err != nil {
		return nil, err
	}

	return user.ToGraphQL(), nil
}

// RefreshToken 単にリフレッシュトークンの更新をするAPI(Vueストアにユーザーデータが存在しており、アクセストークンが切れた導線)
func (r *mutationResolver) RefreshToken(ctx context.Context) (string, *customError.Error) {
	token, err := authService.RefreshTokens(getHttpRequest(ctx), getResponseWriter(ctx), r.UserTokenConfig)
	if err != nil {
		return "", err
	}
	return *token, nil
}

// LoginWithRefreshToken こちらはリフレッシュトークンを用いてログインするAPI(リロードなどでユーザーデータも同時取得する導線・実質再ログイン)
func (r *mutationResolver) LoginWithRefreshToken(ctx context.Context) (*graphModel.AuthPayload, *customError.Error) {
	userWithToken, err := authService.LoginWithRefreshToken(ctx, getHttpRequest(ctx), getResponseWriter(ctx), r.UserTokenConfig, &r.UserRepo)
	if err != nil {
		return nil, err
	}
	return userWithToken.ToGraphQL(), nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, *customError.Error) {
	return true, authService.DeleteRefreshToken(getResponseWriter(ctx))
}

// ResetEmail is the resolver for the resetEmail field.
func (r *mutationResolver) ResetEmail(ctx context.Context, email string) (bool, *customError.Error) {
	//トークンを生成しDBに格納する
	token, err := authService.GeneratePasswordResetToken(ctx, r.UserRepo, email)
	if err != nil {
		return false, err
	}

	//生成したトークンからメールを作り送信する
	err = ses.SendPasswordReset(ctx, email, token)
	if err != nil {
		return false, err
	}
	return true, nil
}

// ResetExe is the resolver for the resetExe field.
func (r *mutationResolver) ResetExe(ctx context.Context, token string, password string) (*graphModel.AuthPayload, *customError.Error) {
	user, err := authService.PasswordResetExe(ctx, r.UserRepo, token, password)
	if err != nil {
		return nil, err
	}
	//ログイン処理も同時にする(トークン発行が必要)
	lUser, err := r.Login(ctx, graphModel.LoginInput{
		Email:    *user.Email,
		Password: password,
	})
	if err != nil {
		return nil, err
	}
	return lUser, nil
}
