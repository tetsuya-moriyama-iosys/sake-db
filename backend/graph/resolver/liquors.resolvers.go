package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"backend/db"
	"backend/graph/model"
	"context"
	"fmt"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
)

// Liquors is the resolver for the liquors field.
func (r *queryResolver) Liquors(ctx context.Context) ([]*model.Liquor, error) {
	panic(fmt.Errorf("not implemented: Liquors - liquors"))
}

// Liquor is the resolver for the liquor field.
func (r *queryResolver) Liquor(ctx context.Context, id int) (*model.Liquor, error) {
	panic(fmt.Errorf("not implemented: Liquor - liquor"))
}

// RandomRecommendList is the resolver for the randomRecommendList field.
func (r *queryResolver) RandomRecommendList(ctx context.Context, limit int) ([]*model.Liquor, error) {
	// コレクションを取得
	collection := db.GetCollection("liquors")

	// $sampleパイプラインを使ってランダムに指定件数を取得
	cursor, err := collection.Aggregate(ctx, mongo.Pipeline{
		{{"$sample", bson.D{{"size", limit}}}},
	})
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	var results []*model.Liquor
	if err = cursor.All(ctx, &results); err != nil {
		return nil, err
	}

	return results, nil
}
