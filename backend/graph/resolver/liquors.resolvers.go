package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"backend/graph/graphModel"
	"backend/middlewares/auth"
	"backend/middlewares/customError"
	"backend/service/categoryService"
	"backend/service/liquorService"
	"backend/service/userService"
	"context"
)

// PostBoard is the resolver for the postBoard field.
func (r *mutationResolver) PostBoard(ctx context.Context, input graphModel.BoardInput) (bool, *customError.Error) {
	return liquorService.PostBoard(ctx, r.LiquorRepo, r.UserRepo, input)
}

// Liquor is the resolver for the liquor field.
func (r *queryResolver) Liquor(ctx context.Context, id string) (*graphModel.Liquor, *customError.Error) {
	return liquorService.GetLiquor(ctx, r.LiquorRepo, r.CategoryRepo, id)
}

// RandomRecommendList is the resolver for the randomRecommendList field.
func (r *queryResolver) RandomRecommendList(ctx context.Context, limit int) ([]*graphModel.Liquor, *customError.Error) {
	collection, err := r.LiquorRepo.GetRandomLiquors(ctx, limit)
	if err != nil {
		return nil, err
	}
	var results []*graphModel.Liquor

	// 結果をGraphQLの構造体にマッピング（スネークケースからキャメルケースへの変換）
	for _, liquor := range collection {
		results = append(results, liquor.ToGraphQL())
	}

	return results, nil
}

// ListFromCategory is the resolver for the listFromCategory field.
func (r *queryResolver) ListFromCategory(ctx context.Context, categoryID int) (*graphModel.ListFromCategory, *customError.Error) {
	ids, err := categoryService.GetBelongCategoryIdList(ctx, categoryID, &r.CategoryRepo)
	if err != nil {
		return nil, err
	}
	list, err := r.LiquorRepo.GetLiquorsFromCategoryIds(ctx, ids)
	if err != nil {
		return nil, err
	}
	var liquors []*graphModel.Liquor

	//GraphQLスキーマに変換
	for _, liquor := range list {
		liquors = append(liquors, liquor.ToGraphQL())
	}
	//カテゴリ名を取得する
	category, err := r.CategoryRepo.GetCategoryByID(ctx, categoryID)
	if err != nil {
		return nil, err
	}

	result := &graphModel.ListFromCategory{
		CategoryName:        category.Name,
		CategoryDescription: category.Description,
		Liquors:             liquors,
	}

	return result, err
}

// LiquorHistories is the resolver for the liquorHistories field.
func (r *queryResolver) LiquorHistories(ctx context.Context, id string) (*graphModel.LiquorHistory, *customError.Error) {
	return liquorService.GetLiquorHistories(ctx, r.LiquorRepo, id)
}

// Board TODO:ページネーション
func (r *queryResolver) Board(ctx context.Context, liquorID string, page *int) ([]*graphModel.BoardPost, *customError.Error) {
	return liquorService.GetBoard(ctx, r.LiquorRepo, liquorID, page)
}

// GetMyBoard 自身の投稿を取得する(初期値設定用)
func (r *queryResolver) GetMyBoard(ctx context.Context, liquorID string) (*graphModel.BoardPost, *customError.Error) {
	//未ログイン時にも呼ばれる関数であり、未ログインはエラーなしで空値を返すという処理をする必要がある
	isLogin := userService.IsLogin(ctx)
	if isLogin == false {
		return nil, nil
	}

	//ここからはユーザーが存在している前提の処理
	uId, err := auth.GetId(ctx)
	if err != nil {
		return nil, err
	}
	board, err := liquorService.GetMyBoard(ctx, r.LiquorRepo, liquorID, uId)
	if err != nil {
		return nil, err
	}

	return board.ToGraphQL(), nil
}
